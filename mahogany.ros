#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '("cl-wlroots" "mahogany" "swank") :silent t)
  )

#+sbcl
(progn
  (sb-ext:enable-debugger)
  (require 'sb-sprof))


(in-package :mahogany)


(defvar *wm*)
(defvar *backend*)

(defun main (&rest argv)
  (declare (ignorable argv))
  (wlr:log-init :log-debug (cffi:null-pointer))
  (log-init :level :trace)
  (setf *backend* (mahogany/backend:get-server))
  (setf *wm* (make-instance 'mahogany/wm:window-manager))
  (set-backend *wm* *backend*)
  (set-window-manager *backend* *wm*)
  (let ((*debugger-hook* (lambda (condition hook)
			   (declare (ignore hook))
			   (log-string :fatal "A fatal error occured ~S~%~A" condition
				       (with-output-to-string (stream)
					 #+sbcl
					 (dolist (frame (sb-debug:list-backtrace))
					   (print frame stream))
					 #+ccl
					 (ccl:print-call-history :stream stream
								 :start-frame-number 8
								 :show-internal-frames nil)))
			   (let ((*debugger-hook* nil))
			     (stop-backend *backend*)
			     (cleanup-backend *backend*)))))

      (let ((mahogany/tree:*new-split-type* :binary))
	(start-backend *backend*)))
  (cleanup-backend *backend*)
  (log-string :debug "Leftover listeners:")
  (maphash (lambda (key value)
	     (log-string :debug "Key: ~A Value: ~A" key value))
	   mahogany/backend::*listener-hash*)
  (uiop:quit))

;;; vim: set ft=lisp lisp:
